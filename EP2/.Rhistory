read.delim('u.item')
read.delim('ml-100k/u.item')
read.delim('ml-100k/u.item', sep = '|')
read.delim('ml-100k/u.item', sep = '|', header = FALSE)
df <- read.table('ml-100k/u.data',
col.names = c('user_id',
'item_id',
'rating',
'timestamp'))
# EX 2
userid <- df$user_id
itemid <- df$item_id
rating <- df$rating
matriz <- matrix(nrow = max(userid), ncol = max(itemid))
for(index in 1:nrow(df)){
matriz[df[index,1], df[index,2]] <- df[index,3]
}
# EX 3
contaLinha <- function(m){
q_rating_user <- c()
for (i in 1:nrow(m)){
q_rating_user <- c(q_rating_user, length(which(!is.na(m[i, ])))) # onde o valor na linha da matriz for NA, retorna o índice e depois calcula o tamanho de todos esses índices, que saem em de which vetorizado
}
q_rating_user
}
# EX 4
contaColuna <- function(m){
q_rating_movie <- c()
for (i in 1:ncol(m)){
q_rating_movie <- c(q_rating_movie, length(which(!is.na(m[, i]))))
}
q_rating_movie
}
## Função  que calcula média da coluna de uma matriz
mediaColuna <- function(m){
mean_m <- c()
for (index in 1:ncol(m)){
mean_m <- c(mean_m, mean_without_na(m[, index], na.rm = TRUE))
}
mean_m
}
# EX 5
## Criação de uma função que calcula a média sem NA
mean_without_na <- function(vector){
sum_elements <- 0
len_new_vector <- c()
for(element in vector){
if (!is.na(element)){
len_new_vector <- len_new_vector + 1    # tamanho do novo vetor sem NA
sum_elements <- sum_elements + element
}
}
mean_vector <- sum_elements / len_new_vector
mean_vector
}
# EX 4
contaColuna <- function(m){
q_rating_movie <- c()
for (i in 1:ncol(m)){
q_rating_movie <- c(q_rating_movie, length(which(!is.na(m[, i]))))
}
q_rating_movie
}
# EX 6
mediaFilmes <- mediaColuna(matriz)
## Função  que calcula média da coluna de uma matriz
mediaColuna <- function(m){
mean_m <- c()
for (index in 1:ncol(m)){
mean_m <- c(mean_m, mean_without_na(m[, index]))
}
mean_m
}
# EX 6
mediaFilmes <- mediaColuna(matriz)
mediaFilmes
matriz
contaLinha(matriz)
contaColuna(m)
contaColuna(matriz)
# EX 5
## Criação de uma função que calcula a média sem NA
mean_without_na <- function(vector){
sum_elements <- 0
len_new_vector <- 0
for(element in vector){
if (!is.na(element)){
len_new_vector <- len_new_vector + 1    # tamanho do novo vetor sem NA
sum_elements <- sum_elements + element
}
}
mean_vector <- sum_elements / len_new_vector
mean_vector
}
## Função  que calcula média da coluna de uma matriz
mediaColuna <- function(m){
mean_m <- c()
for (index in 1:ncol(m)){
mean_m <- c(mean_m, mean_without_na(m[, index]))
}
mean_m
}
# EX 6
mediaFilmes <- mediaColuna(matriz)
mediaFilmes
# EX 7
u_item <- read.delim('ml-100k/u.item', '|',
col.names = c(
'movie_id',
'movie_title',
'release_date',
'video_release_date',
'IMDb_url',
'unknown',
'action',
'crime',
'adventure',
'animation',
'childrens',
'comedy',
'documentary',
'drama',
'romance',
'sci-fi',
'thriller',
'war',
'western'))
# EX 7
u_item <- read.delim('ml-100k/u.item', sep = '|',
col.names = c(
'movie_id',
'movie_title',
'release_date',
'video_release_date',
'IMDb_url',
'unknown',
'action',
'crime',
'adventure',
'animation',
'childrens',
'comedy',
'documentary',
'drama',
'romance',
'sci-fi',
'thriller',
'war',
'western'))
read.table('ml-100k/u.item')
read.table('ml-100k/u.item', sep = '|')
read.csv('ml-100k/u.item', header = FALSE)
a <- read.csv('ml-100k/u.item', header = FALSE)
View(a)
read.csv('ml-100k/u.item', header = FALSE, sep = "|")
View(a)
a <- read.csv('ml-100k/u.item', header = FALSE, sep = "|")
# EX 7
u_item <- read.delim('ml-100k/u.item', sep = '|',
col.names = c(
'movie_id',
'movie_title',
'release_date',
'na_column',
'video_release_date',
'IMDb_url',
'unknown',
'action',
'crime',
'adventure',
'animation',
'childrens',
'comedy',
'documentary',
'drama',
'romance',
'sci-fi',
'thriller',
'war',
'western'))
# EX 7
u_item <- read.csv('ml-100k/u.item', sep = '|',
col.names = c(
'movie_id',
'movie_title',
'release_date',
'na_column',
'video_release_date',
'IMDb_url',
'unknown',
'action',
'crime',
'adventure',
'animation',
'childrens',
'comedy',
'documentary',
'drama',
'romance',
'sci-fi',
'thriller',
'war',
'western'))
# EX 7
u_item <- read.csv('ml-100k/u.item', sep = '|')
View(u_item)
# EX 7
u_item <- read.csv('ml-100k/u.item', sep = '|', header = FALSE)
# EX 7
u_item <- read.csv('ml-100k/u.item', sep = '|', header = FALSE,
col.names = c('movie_id', 'movie_title', 3:24))
data <- u_item[, c('movie_id', 'movie_title')]
mediaFilmes >= 4.3
nomeFilmes[mascara]
mascara <- mediaFilmes >= 4.3
nomeFilmes[mascara]
nomeFilmes <- dados$movie_title
nomeFilmes <- data$movie_title
mascara <- mediaFilmes >= 4.3
nomeFilmes[mascara]
mascara <- mediaFilmes >= 4.3
all_movies <- data$movie_title
nomeFilmes <- all_movies[mascara]
# EX 8
contaUsers <- contaLinha(matriz)
# EX 9
contaFilmes <- contaColuna(matriz)
hist(contaFilmes)
# EX 10
hist(contaUsers)
# EX 10
hist(contaUsers)
hist(contaFilmes)
hist(contaUsers,  breaks = 10)
hist(contaUsers,  breaks = 100)
hist(contaFilmes,  breaks = 10)
hist(contaFilmes, breaks = 100)
nomeFilmes
# EX 10
hist(contaUsers)
hist(contaFilmes,
main = 'Histograma da quantidade de filmes que cada usuário avaliou',
xlab = 'Usuário',
ylab = 'Quantidade de filmes avaliados')
hist(contaFilmes,
main = 'Histograma da quantidade de avaliações que cada cada filme recebeu',
xlab = 'Filme',
ylab = 'Quantidade de avaliações')
## Experimentando outros resultados
hist(contaUsers, breaks = 50,
main = 'Histograma da quantidade de avaliações que cada usuário deu (breaks = 50)',
xlab = 'Usuário',
ylab = 'Quantidade de avaliações')
hist(contaUsers, breaks = 100,
main = 'Histograma da quantidade de avaliações que cada usuário deu (breaks = 100',
xlab = 'Usuário',
ylab = 'Quantidade de avaliações')
hist(contaFilmes,
main = 'Histograma da quantidade de avaliações que cada cada filme recebeu',
xlab = 'Filme',
ylab = 'Quantidade de avaliações')
hist(contaFilmes, breaks = 50,
main = 'Histograma da quantidade de avaliações que cada cada filme recebeu',
xlab = 'Filme',
ylab = 'Quantidade de avaliações')
hist(contaFilmes, breaks = 100,
main = 'Histograma da quantidade de avaliações que cada cada filme recebeu',
xlab = 'Filme',
ylab = 'Quantidade de avaliações')
hist(contaFilmes, breaks = 50,
main = 'Histograma da quantidade de avaliações que cada cada filme recebeu (breaks = 50)',
xlab = 'Filme',
ylab = 'Quantidade de avaliações')
hist(contaFilmes, breaks = 100,
main = 'Histograma da quantidade de avaliações que cada cada filme recebeu (breaks = 100)',
xlab = 'Filme',
ylab = 'Quantidade de avaliações')
knitr::opts_chunk$set(echo = TRUE)
hist(contaUsers,
main = 'Histograma da quantidade de avaliações \\que cada usuário deu',
xlab = 'Usuário',
ylab = 'Quantidade de avaliações')
hist(contaFilmes,
main = 'Histograma da quantidade de avaliações que cada cada filme recebeu',
xlab = 'Filme',
ylab = 'Quantidade de avaliações')
## Experimentando outros resultados
hist(contaUsers, breaks = 50,
main = 'Histograma da quantidade de avaliações que cada usuário deu (breaks = 50)',
xlab = 'Usuário',
ylab = 'Quantidade de avaliações')
hist(contaUsers, breaks = 100,
main = 'Histograma da quantidade de avaliações que cada usuário deu (breaks = 100',
xlab = 'Usuário',
ylab = 'Quantidade de avaliações')
hist(contaFilmes, breaks = 50,
main = 'Histograma da quantidade de avaliações que cada cada filme recebeu (breaks = 50)',
xlab = 'Filme',
ylab = 'Quantidade de avaliações')
hist(contaFilmes, breaks = 100,
main = 'Histograma da quantidade de avaliações que cada cada filme recebeu (breaks = 100)',
xlab = 'Filme',
ylab = 'Quantidade de avaliações')
